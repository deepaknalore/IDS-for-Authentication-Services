namespace Simulator
{
    public class ExperimentalConfiguration
    {
        private const int DaysPerYear = 365;
        private const int WeeksPerYear = 52;
        private const int MonthsPerYear = 12;
        private const ulong Thousand = 1000;
        private const ulong Million = Thousand*Thousand;
        private const ulong Billion = Thousand*Million;

        public class BenignUserAccountGroup
        {
            public ulong GroupSize;
            public ulong LoginsPerYear;
        }

        public BlockingAlgorithmOptions BlockingOptions = new BlockingAlgorithmOptions();

        public TimeSpan TestTimeSpan = new TimeSpan(1, 0, 0, 0); // 1 day

        public enum AttackStrategy
        {
            // This is the first attack where the attcker picks up the top common passwords
            BreadthFirst,
            // Password attack based on the weights of the user - how famous is the user
            Weighted,
            //
            UseUntilLikelyPopular
        };
        public AttackStrategy AttackersStrategy = AttackStrategy.BreadthFirst;

        // Output directories
        public string OutputPath = @"e:\";
        public string OutputDirectoryName = @"Experiment";


        // Input for attacks
        public string PasswordFrequencyFile = @"..\..\rockyou-withcount.txt";
        public string PreviouslyKnownPopularPasswordFile = @"..\..\phpbb.txt";

        //The total number of logins
        public ulong TotalLoginAttemptsToIssue = 10*Thousand;

        //
        public double ChanceOfCoookieReUse = 0.90d;
        //
        public int MaxCookiesPerUserAccount = 10;

        //
        public double ChanceOfIpReUse = 0.85d;
        //
        public int MaxIpPerUserAccount = 5;

        // If there are popular passwords which needs to ve removed from the distribution -
        public int PopularPasswordsToRemoveFromDistribution = 0;

        //
        public double ChanceOfLongRepeatOfStalePassword = 0.0004; // 1 in 2,500

        //
        public double MinutesBetweenLongRepeatOfOldPassword = 5; // an attempt every 5 minutes
        //
        public uint LengthOfLongRepeatOfOldPassword = (uint) ( (60 * 24) / 5 ); // 24 hours / an attempt every 5 minutes

        //Legitimate user makes benign password typo errors
        public double ChanceOfBenignPasswordTypo = 0.02d;

        //
        public double ChanceOfRepeatTypo = 2d/3d; // two thirds

        //
        public double ChanceOfRepeatUseOfPasswordFromAnotherAccount = 1d / 3d; // one thirds

        //
        public double ChanceOfRepeatWrongAccountName = .2d; // 20%

        //
        public double DelayBetweenRepeatBenignErrorsInSeconds = 7d;

        //
        public double ChanceOfBenignAccountNameTypoResultingInAValidUserName = 0.02d;

        // Using another password from a different service
        public double ChanceOfAccidentallyUsingAnotherAccountPassword = 0.02d;

        //
        public double FractionOfLoginAttemptsFromAttacker = 0.5d;

        //
        public ulong NumberOfAttackerControlledAccounts = 1*Thousand;

        // number of IP controled by attacker
        public uint NumberOfIpAddressesControlledByAttacker = 100;// * (uint)Thousand;
        // Overlap of benign and attacker IP
        public double FractionOfMaliciousIPsToOverlapWithBenign = 0.01;

        // for an account an attacker can try max of 25 passwords
        public ulong MaxAttackerGuessesPerPassword = 25;

        //
        public uint ProxySizeInUniqueClientIPs = 1000;

        // Probability of benign users behind proxies
        public double FractionOfBenignIPsBehindProxies = 0.20d;

        // The probability that an attacker chose an invalid account
        public double ProbabilityThatAttackerChoosesAnInvalidAccount = 0.10d;

        // Top 1000 passwords used for attack
        public uint NumberOfPopularPasswordsForAttackerToExploit = 1*(uint)Thousand;

        // Number of accounts used in simulation
        public uint NumberOfBenignAccounts = 10*(uint)Thousand;
    }
}
